@page "/admin/products"
@inject IProductService _productService
@inject NavigationManager _navigationManager
@attribute [Authorize(Roles = "Admin")]

<h3>Products</h3>

@if (_productService.AdminProducts is null)
{
    <span>Loading products...</span>
}
else
{
    <button class="btn btn-primary m-3 float-end" @onclick="CreateProduct">
        <i class="oi oi-plus"></i> Add New Product
    </button>

    <table class="table">
        <thead>
        <tr>
            <th></th>
            <th>Product</th>
            <th>Variant</th>
            <th>Price</th>
            <th>Visible</th>
            <th></th>
        </tr>
        </thead>
        <tbody>
        <Virtualize Items="_productService.AdminProducts" Context="product">
            <tr>
                <td><img src="@product.ImageUrl"/></td>
                <td>@product.Title</td>
                <td>
                    @foreach (var variant in product.Variants)
                    {
                        <span>@variant.ProductType.Name</span>
                        <br/>
                    }
                </td>
                <td>
                    @foreach (var variant in product.Variants)
                    {
                        <span>@variant.Price</span>
                        <br/>
                    }
                </td>
                <td>@(product.Visible ? "✔" : "")</td>
                <td>
                    <button class="btn btn-secondary" @onclick="() => EditProduct(product.Id)">
                        <i class="oi oi-pencil"></i>
                    </button>
                </td>
            </tr>
        </Virtualize>
        </tbody>
    </table>
}

@code {
    protected override async Task OnInitializedAsync()
    {
        await _productService.GetAdminProducts();
    }

    void EditProduct(int id)
    {
        _navigationManager.NavigateTo($"admin/product/{id}");
    }

    void CreateProduct()
    {
        _navigationManager.NavigateTo("admin/product");
    }
}

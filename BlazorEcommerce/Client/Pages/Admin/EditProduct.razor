@page "/admin/product"
@page "/admin/product/{id:int}"
@inject IProductService _productService
@inject IProductTypeService _productTypeService
@inject ICategoryService _categoryService
@inject NavigationManager _navigationManager
@inject IJSRuntime _jsRuntime

@if (_loading)
{
    <span>@_msg</span>
}
else
{
    @if (_product.Editing)
    {
        <h2>Edit "@_product.Title"</h2>
    }
    else if (_product.IsNew)
    {
        <h2>Create a new Product</h2>
    }
    
    <EditForm class="ms-4" Model="_product" OnValidSubmit="AddOrUpdateProduct">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <div>
            <label for="title">Title</label>
            <InputText id="title" @bind-Value="@_product.Title" class="form-control"></InputText>
        </div>
        <div>
            <label for="imageUrl">Image Url</label>
            <InputText id="imageUrl" @bind-Value="@_product.ImageUrl" class="form-control"></InputText>
        </div>
        <div class="mt-2">
            <img src="@_product.ImageUrl"/>
        </div>
        <div>
            <label for="description">Description</label>
            <InputTextArea id="description" @bind-Value="@_product.Description" class="form-control"></InputTextArea>
        </div>
        <hr/>
        <div class="header">
            <div class="col">Product Type / Variant</div>
            <div class="col">Price</div>
            <div class="col">Original Price</div>
            <div class="col">Visible</div>
            <div class="col"></div>
        </div>
        @foreach (var variant in _product.Variants)
        {
            <div class="row">
                <div class="col">
                    <InputSelect disabled="@variant.Deleted" @bind-Value="variant.ProductTypeId" class="form-control">
                        @foreach (var productType in _productTypeService.ProductTypes)
                        {
                            <option value="@productType.Id.ToString()">@productType.Name</option>
                        }
                    </InputSelect>
                </div>
                <div class="col">
                    <InputNumber @bind-Value="variant.Price" class="form-control" disabled="@variant.Deleted"></InputNumber>
                </div>
                <div class="col">
                    <InputNumber @bind-Value="variant.OriginalPrice" class="form-control" disabled="@variant.Deleted"></InputNumber>
                </div>
                <div class="col col-visible">
                    <InputCheckbox @bind-Value="variant.Visible" style="transform: scale(1.5, 1.5);" disabled="@variant.Deleted"></InputCheckbox>
                </div>
                <div class="col">
                    <button type="button" class="btn btn-danger" disabled="@variant.Deleted" @onclick="() => RemoveVariant(variant.ProductTypeId)">
                        <i class="oi oi-trash"></i>
                    </button>
                </div>
            </div>
        }
        <button type="button" class="btn btn-primary" @onclick="AddVariant">
            <i class="oi oi-plus"></i> Add Variant
        </button>
        <hr/>
        <div>
            <label for="category">Category</label>
            <InputSelect id="category" @bind-Value="_product.CategoryId" class="form-control">
                @foreach (var category in _categoryService.AdminCategories)
                {
                    <option value="@category.Id">@category.Name</option>
                }
            </InputSelect>
        </div>
        <hr/>
        <div class="form-check">
            <InputCheckbox id="featured" @bind-Value="_product.Featured" class="form-check-input"></InputCheckbox>
            <label for="featured" class="form-check-label">Featured</label>
        </div>
        <div class="form-check">
            <InputCheckbox id="visible" @bind-Value="_product.Visible" class="form-check-input"></InputCheckbox>
            <label for="visible" class="form-check-label">Visible</label>
        </div>
        <hr/>
        <button type="submit" class="btn btn-primary float-end">@_btnText</button>
        <ValidationSummary></ValidationSummary>
    </EditForm>

    @if (!_product.IsNew)
    {
        <button type="button" class="btn btn-danger float-start ms-4" @onclick="DeleteProduct">Delete Product</button>
    }
}

@code {
    [Parameter]
    public int Id { get; set; }

    Product _product = new();
    bool _loading = true;
    string _btnText = string.Empty;
    string _msg = "Loading...";

    protected override async Task OnInitializedAsync()
    {
        await _productTypeService.GetProductTypes();
        await _categoryService.GetAdminCategories();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id == 0)
        {
            _product = new Product {IsNew = true};
            _btnText = "Create Product";
        }
        else
        {
            Product dbProduct = (await _productService.GetSingleProduct(Id)).Data;
            if (dbProduct is null)
            {
                _msg = $"Product with the Id '{Id}' does not exist.";
                return;
            }
            _product = dbProduct;
            _product.Editing = true;
            _btnText = "Update Product";
        }
        _loading = false;
    }

    void RemoveVariant(int productTypeId)
    {
        var variant = _product.Variants.Find(v => v.ProductTypeId == productTypeId);
        if (variant is null)
        {
            return;
        }
        if (variant.IsNew)
        {
            _product.Variants.Remove(variant);
        }
        else
        {
            variant.Deleted = true;
        }
    }

    void AddVariant()
    {
        _product.Variants.Add(new ProductVariant {IsNew = true, ProductId = _product.Id});
    }

    async void AddOrUpdateProduct()
    {
        if (_product.IsNew)
        {
            var result = await _productService.CreateProduct(_product);
            _navigationManager.NavigateTo($"admin/product/{result.Id}");
        }
        else
        {
            _product.IsNew = false;
            _product = await _productService.UpdateProduct(_product);
            _navigationManager.NavigateTo($"admin/product/{_product.Id}", true);
        }
    }

    async void DeleteProduct()
    {
        bool confirmed = await _jsRuntime.InvokeAsync<bool>("confirm",
            $"Do you really want to delete '{_product.Title}'?");
        if (confirmed)
        {
            await _productService.DeleteProduct(_product);
            _navigationManager.NavigateTo("admin/products");
        }
    }
}

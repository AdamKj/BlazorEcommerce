@inject IProductService _productService
@implements IDisposable;

@if (_productService.Products.Count == 0)
{
    <span>@_productService.Message</span>
}
else
{
    <ul class="list-unstyled">
        @foreach (var product in _productService.Products)
        {
            <li class="media my-3">
                <div class="media-img-wrapper m-2">
                    <a href="/Product/@product.Id">
                        <img class="media-img rounded" src="@product.ImageUrl" alt="@product.Title"/>
                    </a>
                </div>
                <div class="media-body">
                    <a href="/Product/@product.Id">
                        <h4 class="mb-0">@product.Title</h4>
                    </a>
                    <p class="product-desc">@product.Description</p>
                    <h4 class="price">@GetPriceText(product)@_currency</h4>
                </div>
            </li>
            <hr/>
        }
    </ul>
}

@code {
    string _currency = "kr";

    protected override void OnInitialized()
    {
        _productService.ProductsChanged += StateHasChanged;
    }

    public void Dispose()
    {
        _productService.ProductsChanged -= StateHasChanged;
    }

    private string GetPriceText(Product product)
    {
        var variants = product.Variants;
        if (variants.Count == 0)
            return String.Empty;
        if (variants.Count == 1)
            return $"{variants[0].Price}";

        double minPrice = variants.Min(v => v.Price);
        return $"Börjar på {minPrice}";

    }
}